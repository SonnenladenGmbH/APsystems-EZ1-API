{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#introduction-to-apsystems-ez1m-python-library","title":"Introduction to APsystems EZ1M Python Library","text":"<p>Welcome to the documentation for the APsystems EZ1M Python Library. This library provides a comprehensive interface for interacting with the EZ1 Microinverters from APsystems. Designed with simplicity and efficiency in mind, it enables users to easily monitor and control various aspects of their EZ1 Microinverters over a network.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Device Information Retrieval: Fetch detailed information about your microinverter, including device ID, firmware version, network details, and power settings.</li> <li>Alarm Status Monitoring: Keep track of the alarm status for critical components, ensuring timely identification and response to potential issues.</li> <li>Output Data Analysis: Access real-time data on power output, energy readings, and total energy accumulation for efficient energy management.</li> <li>Power Management: Adjust and monitor the power output settings of your microinverter to optimize performance.</li> <li>Network Communication: Utilize the async capabilities of Python to communicate with your device seamlessly over a network.</li> </ul>"},{"location":"api/","title":"Reference","text":""},{"location":"api/#APsystemsEZ1.APsystemsEZ1M","title":"<code>APsystemsEZ1M</code>","text":"<p>This class represents an EZ1 Microinverter and provides methods to interact with it over a network. The class allows for getting and setting various device parameters like power status, alarm information, device information, and power limits.</p> Source code in <code>APsystemsEZ1/__init__.py</code> <pre><code>class APsystemsEZ1M:\n    \"\"\"This class represents an EZ1 Microinverter and provides methods to interact with it\n    over a network. The class allows for getting and setting various device parameters like\n    power status, alarm information, device information, and power limits.\n    \"\"\"\n\n    @dataclass\n    class _DebounceVal:\n        old_state: float = 0.0\n        base_state: float = 0.0\n        last_update: int = 0\n\n    def __init__(\n        self,\n        ip_address: str,\n        port: int = 8050,\n        timeout: int = 10,\n        max_power: int = 800,\n        min_power: int = 30,\n        session: ClientSession | None = None,\n        enable_debounce: bool = False,\n    ) -&gt; None:\n        \"\"\"\n        Initializes a new instance of the EZ1Microinverter class with the specified IP address\n        and port.\n\n        :param ip_address: The IP address of the EZ1 Microinverter.\n        :param port: The port on which the microinverter's server is running. Default is 8050.\n        :param timeout: The timeout for all requests. The default of 10 seconds should be plenty.\n        \"\"\"\n        self.base_url = f\"http://{ip_address}:{port}\"\n        self.timeout = timeout\n        self.session = session\n        self.max_power = max_power\n        self.min_power = min_power\n        self.enable_debounce = enable_debounce\n        self._e1 = self._DebounceVal()\n        self._e2 = self._DebounceVal()\n\n    async def _request(self, endpoint: str, retry: int = 3) -&gt; dict | None:\n        \"\"\"\n        A private method to send HTTP requests to the specified endpoint of the microinverter.\n        This method is used internally by other class methods to perform GET or POST requests.\n\n        :param endpoint: The API endpoint to make the request to.\n        :param retry: Number of retry attempts if the request fails.\n\n        :return: The JSON response from the microinverter as a dictionary.\n        :raises: Prints an error message if the HTTP request fails for any reason.\n        \"\"\"\n        url = f\"{self.base_url}/{endpoint}\"\n        if self.session is None:\n            ses = ClientSession()\n        else:\n            ses = self.session\n        try:\n            async with ses.get(url, timeout=self.timeout) as resp:\n                data = await resp.json()\n                _LOGGER.debug(\"%s: %s\", endpoint, data)\n\n                # Handle response\n                if resp.status != 200:\n                    raise HttpBadRequest(f\"HTTP Error: {resp.status}\")\n                if data[\"message\"] == \"SUCCESS\":\n                    return data\n                if retry &gt; 0:  # Re-run request when the inverter returned failed because of unknown reason\n                    _LOGGER.debug(f\"The request to {endpoint} failed. Retrying (retry count: {retry})...\")\n                    return await self._request(endpoint, retry=retry - 1)\n                raise InverterReturnedError\n        finally:\n            # Close if session created on per-execution base\n\n            if self.session is None:\n                await ses.close()\n\n    def _debounce(self, state: _DebounceVal, new_state: float) -&gt; float:\n        \"\"\"Recover total value in case state is reset during a day.\"\"\"\n        if (\n            isinstance(state.old_state, float)\n            and isinstance(new_state, float)\n            and state.old_state &gt; new_state\n        ):\n            state.base_state = state.base_state + state.old_state\n\n        state.old_state = new_state\n\n        # reset basis each day\n        if state.last_update != datetime.datetime.now().day:\n            state.last_update = datetime.datetime.now().day\n            state.base_state = 0.0\n\n        if isinstance(new_state, float):\n            return new_state + state.base_state\n\n        return new_state\n\n    async def get_device_info(self) -&gt; ReturnDeviceInfo | None:\n        \"\"\"\n        Retrieves detailed information about the device. This method sends a request to the\n        \"getDeviceInfo\" endpoint and returns a dictionary containing various details about the device.\n\n        The returned data includes the device ID, device version, the SSID it is connected to, its IP\n        address, and its minimum and maximum power settings. This information can be used for monitoring\n        and configuring the device.\n\n        The response contains the following attributes:\n\n        - __deviceId__ (`str`): The unique identifier for the device.\n        - __devVer__ (`str`): The version of the device firmware or software.\n        - __ssid__ (`str`): The SSID of the network to which the device is currently connected.\n        - __ipAddr__ (`str`): The current IP address of the device.\n        - __minPower__ (`int`): The minimum power output that the device can be set to, measured in watts.\n        - __maxPower__ (`int`): The maximum power output that the device can be set to, also in watts.\n\n\n\n        :return: Different information about the inverter\n        :rtype: ReturnDeviceInfo\n\n        \"\"\"\n        response = await self._request(\"getDeviceInfo\")\n        return (\n            ReturnDeviceInfo(\n                deviceId=response[\"data\"][\"deviceId\"],\n                devVer=response[\"data\"][\"devVer\"],\n                ssid=response[\"data\"][\"ssid\"],\n                ipAddr=response[\"data\"][\"ipAddr\"],\n                minPower=int(response[\"data\"][\"minPower\"]),\n                maxPower=int(response[\"data\"][\"maxPower\"]),\n                isBatterySystem=bool(IS_BATTERY_REGEX.match(response[\"data\"][\"devVer\"]))\n            )\n            if response and response.get(\"data\")\n            else None\n        )\n\n    async def get_alarm_info(self) -&gt; ReturnAlarmInfo | None:\n        \"\"\"\n        Retrieves the alarm status information for various components of the device. This method\n        makes a request to the \"getAlarm\" endpoint and returns a dictionary containing the alarm\n        status for different parameters.\n\n\n        The response contains the following attributes:\n        - __offgrid__ (`bool`): Off-Grid Status\n        _ __shortcircuit_1__ (`bool`): DC 1 Short Circuit Error status\n        _ __shortcircuit_2__ (`bool`): DC 2 Short Circuit Error status\n        - __operating__ (`bool`): All okay\n\n        :return: Information about possible point of failures\n        \"\"\"\n        response = await self._request(\"getAlarm\")\n        return (\n            ReturnAlarmInfo(\n                offgrid=bool(int(response[\"data\"][\"og\"])),\n                shortcircuit_1=bool(int(response[\"data\"][\"isce1\"])),\n                shortcircuit_2=bool(int(response[\"data\"][\"isce2\"])),\n                operating=not bool(int(response[\"data\"][\"oe\"])),\n            )\n            if response\n            else None\n        )\n\n    async def get_output_data(self) -&gt; ReturnOutputData | None:\n        \"\"\"\n        Retrieves the output data from the device. This method calls a private method `_request`\n        with the endpoint \"getOutputData\" to fetch the device's output data.\n\n        The returned data includes various parameters such as power output status ('p1', 'p2'),\n        energy readings ('e1', 'e2'), and total energy ('te1', 'te2') for two different inputs\n        of the inverter. Additionally, it provides a status message and the device ID.\n\n        The response contains the following attributes:\n        - __p1__ (`float`): Power output status of inverter input 1\n        - __e1__ (`float`): Energy reading for inverter input 1\n        - __te1__ (`float`): Total energy for inverter input 1\n        - __p2__ (`float`): Power output status of inverter input 2\n        - __e2__ (`float`): Energy reading for inverter input 2\n        - __te2__ (`float`): Total energy for inverter input 2\n\n        :return: Information about energy/power-related information\n        \"\"\"\n        response = await self._request(\"getOutputData\")\n        if response:\n            response[\"data\"] = {\n                key: float(value)\n                if isinstance(value, int)\n                else value\n                for key, value\n                in response[\"data\"].items()\n            }\n\n        if self.enable_debounce and response:\n            response[\"data\"].update(\n                {\n                    \"e1\": self._debounce(self._e1, response[\"data\"][\"e1\"]),\n                    \"e2\": self._debounce(self._e2, response[\"data\"][\"e2\"]),\n                }\n            )\n\n        return ReturnOutputData(**response[\"data\"]) if response else None\n\n    async def get_total_output(self) -&gt; float | None:\n        \"\"\"\n        Retrieves and calculates the combined power output status of inverter inputs 1 and 2.\n        This method first calls get_output_data() to fetch the output data from the device, which\n        includes individual power output values for 'p1' and 'p2'. It then sums these values to\n        provide the total combined power output.\n\n        :return: The sum of power output values 'p1' and 'p2' as a float.\n        \"\"\"\n        data = await self.get_output_data()\n        return float(data.p1 + data.p2) if data else None\n\n    async def get_total_energy_today(self) -&gt; float | None:\n        \"\"\"\n        Retrieves and calculates the total energy generated today by both inverter inputs, 1 and 2.\n        This method first calls get_output_data() to fetch the output data from the device, which\n        includes individual energy readings for 'e1' and 'e2', each representing the energy in\n        kilowatt-hours (kWh) generated by the respective inverter inputs.\n\n        :return: The sum of the energy readings 'e1' and 'e2' as a float, representing the total energy\n                 generated today in kWh by both inverter inputs.\n        \"\"\"\n        data = await self.get_output_data()\n        return float(data.e1 + data.e2) if data else None\n\n    async def get_total_energy_lifetime(self) -&gt; float | None:\n        \"\"\"\n        Retrieves and calculates the total lifetime energy generated by both inverter inputs 1 and 2.\n        This method first calls get_output_data() to fetch the output data from the device, which\n        includes individual lifetime energy readings for 'te1' and 'te2'. Each of these values\n        represents the total lifetime energy generated by the respective inverter inputs, reported\n        in kilowatt-hours (kWh).\n\n        :return: The sum of the lifetime energy readings 'te1' and 'te2' as a float, representing the\n                 total lifetime energy in kWh generated by both inverter inputs.\n        \"\"\"\n        data = await self.get_output_data()\n        return float(data.te1 + data.te2) if data else None\n\n    async def get_max_power(self) -&gt; int | None:\n        \"\"\"Retrieves the set maximum power setting of the device. This method makes a request to the\n        \"getMaxPower\" endpoint and returns a dictionary containing the maximum power limit of the device set by the user.\n\n        :return: Max output power in watts\n        \"\"\"\n        response = await self._request(\"getMaxPower\")\n        if response is None or response[\"data\"][\"maxPower\"] == \"\":\n            return None\n        return int(response[\"data\"][\"maxPower\"])\n\n    async def set_max_power(self, power_limit: int) -&gt; int | None:\n        \"\"\"\n        Sets the maximum power limit of the device. This method sends a request to the \"setMaxPower\"\n        endpoint with the specified power limit as a parameter. The power limit must be an integer\n        within the range of 30 to 800 watts.\n\n        If the provided power limit is outside this range, the method raises a ValueError.\n\n        :param power_limit: The desired maximum power setting for the device, in watts.\n                            Must be an integer between 30 and 800.\n\n        :return: (Newly) set max output power in watts\n        :raises ValueError: If 'power_limit' is not within the range of 30 to 800.\n\n        The key in the 'data' object is:\n        - 'maxPower': Indicates the newly set maximum power output of the device in watts.\n        \"\"\"\n        if not self.min_power &lt;= power_limit &lt;= self.max_power:\n            raise ValueError(\n                f\"Invalid setMaxPower value: expected int between '30' and '800', got '{power_limit}'\"\n            )\n        request = await self._request(f\"setMaxPower?p={power_limit}\")\n        return int(request[\"data\"][\"maxPower\"]) if request else None\n\n    async def get_device_power_status(self) -&gt; bool:\n        \"\"\"\n        Retrieves the current power status of the device. This method sends a request to the\n        \"getOnOff\" endpoint and returns a dictionary containing the power status of the device.\n\n        The 'data' field in the returned dictionary includes the 'status' key, representing the\n        current power status of the device, where '0' indicates that the device is on, and '1'\n        indicates that it is off.\n\n        :return: 0/normal when on, 1/alarm when off\n        \"\"\"\n        response = await self._request(\"getOnOff\")\n\n        match (status := response[\"data\"][\"status\"]):\n            case int():\n                return not bool(status)\n            case str() if status.isdigit():\n                return not bool(int(status))\n            case _:\n                raise InverterReturnedError\n\n    async def set_device_power_status(self, power_status: bool) -&gt; bool | None:\n        \"\"\"\n        Sets the power status of the device to either on or off. This method sends a request to the\n        \"setOnOff\" endpoint with a specified power status parameter. The power status accepts multiple\n        string representations: '0' or 'ON' to start the inverter, and '1', 'SLEEP', or 'OFF' to stop\n        the inverter.\n\n        If the provided power status does not match any of the accepted representations, the method\n        raises a ValueError with a descriptive message.\n\n        :param power_status: The desired power status for the device, specified as '0', 'ON' for\n                             starting the inverter, or '1', 'SLEEP', 'OFF' for stopping it.\n        :return: 0/normal when on, 1/alarm when off\n        :raises ValueError: If 'power_status' does not match the accepted values. The error message\n                            explains the valid values and their meanings.\n\n        Note: Internally, the method treats '0' and 'ON' as equivalent, both setting the power status\n        to '0'. Similarly, '1', 'SLEEP', and 'OFF' are treated as equivalent, setting the power status\n        to '1'.\n        \"\"\"\n        if power_status:\n            status_value = \"0\"\n        else:\n            status_value = \"1\"\n        request = await self._request(f\"setOnOff?status={status_value}\")\n        return not bool(int(request[\"data\"][\"status\"])) if request else None\n</code></pre>"},{"location":"api/#APsystemsEZ1.APsystemsEZ1M.__init__","title":"<code>__init__(ip_address, port=8050, timeout=10, max_power=800, min_power=30, session=None, enable_debounce=False)</code>","text":"<p>Initializes a new instance of the EZ1Microinverter class with the specified IP address and port.</p> <p>Parameters:</p> Name Type Description Default <code>ip_address</code> <code>str</code> <p>The IP address of the EZ1 Microinverter.</p> required <code>port</code> <code>int</code> <p>The port on which the microinverter's server is running. Default is 8050.</p> <code>8050</code> <code>timeout</code> <code>int</code> <p>The timeout for all requests. The default of 10 seconds should be plenty.</p> <code>10</code> Source code in <code>APsystemsEZ1/__init__.py</code> <pre><code>def __init__(\n    self,\n    ip_address: str,\n    port: int = 8050,\n    timeout: int = 10,\n    max_power: int = 800,\n    min_power: int = 30,\n    session: ClientSession | None = None,\n    enable_debounce: bool = False,\n) -&gt; None:\n    \"\"\"\n    Initializes a new instance of the EZ1Microinverter class with the specified IP address\n    and port.\n\n    :param ip_address: The IP address of the EZ1 Microinverter.\n    :param port: The port on which the microinverter's server is running. Default is 8050.\n    :param timeout: The timeout for all requests. The default of 10 seconds should be plenty.\n    \"\"\"\n    self.base_url = f\"http://{ip_address}:{port}\"\n    self.timeout = timeout\n    self.session = session\n    self.max_power = max_power\n    self.min_power = min_power\n    self.enable_debounce = enable_debounce\n    self._e1 = self._DebounceVal()\n    self._e2 = self._DebounceVal()\n</code></pre>"},{"location":"api/#APsystemsEZ1.APsystemsEZ1M.get_alarm_info","title":"<code>get_alarm_info()</code>  <code>async</code>","text":"<p>Retrieves the alarm status information for various components of the device. This method makes a request to the \"getAlarm\" endpoint and returns a dictionary containing the alarm status for different parameters.</p> <p>The response contains the following attributes: - offgrid (<code>bool</code>): Off-Grid Status _ shortcircuit_1 (<code>bool</code>): DC 1 Short Circuit Error status _ shortcircuit_2 (<code>bool</code>): DC 2 Short Circuit Error status - operating (<code>bool</code>): All okay</p> <p>Returns:</p> Type Description <code>ReturnAlarmInfo | None</code> <p>Information about possible point of failures</p> Source code in <code>APsystemsEZ1/__init__.py</code> <pre><code>async def get_alarm_info(self) -&gt; ReturnAlarmInfo | None:\n    \"\"\"\n    Retrieves the alarm status information for various components of the device. This method\n    makes a request to the \"getAlarm\" endpoint and returns a dictionary containing the alarm\n    status for different parameters.\n\n\n    The response contains the following attributes:\n    - __offgrid__ (`bool`): Off-Grid Status\n    _ __shortcircuit_1__ (`bool`): DC 1 Short Circuit Error status\n    _ __shortcircuit_2__ (`bool`): DC 2 Short Circuit Error status\n    - __operating__ (`bool`): All okay\n\n    :return: Information about possible point of failures\n    \"\"\"\n    response = await self._request(\"getAlarm\")\n    return (\n        ReturnAlarmInfo(\n            offgrid=bool(int(response[\"data\"][\"og\"])),\n            shortcircuit_1=bool(int(response[\"data\"][\"isce1\"])),\n            shortcircuit_2=bool(int(response[\"data\"][\"isce2\"])),\n            operating=not bool(int(response[\"data\"][\"oe\"])),\n        )\n        if response\n        else None\n    )\n</code></pre>"},{"location":"api/#APsystemsEZ1.APsystemsEZ1M.get_device_info","title":"<code>get_device_info()</code>  <code>async</code>","text":"<p>Retrieves detailed information about the device. This method sends a request to the \"getDeviceInfo\" endpoint and returns a dictionary containing various details about the device.</p> <p>The returned data includes the device ID, device version, the SSID it is connected to, its IP address, and its minimum and maximum power settings. This information can be used for monitoring and configuring the device.</p> <p>The response contains the following attributes:</p> <ul> <li>deviceId (<code>str</code>): The unique identifier for the device.</li> <li>devVer (<code>str</code>): The version of the device firmware or software.</li> <li>ssid (<code>str</code>): The SSID of the network to which the device is currently connected.</li> <li>ipAddr (<code>str</code>): The current IP address of the device.</li> <li>minPower (<code>int</code>): The minimum power output that the device can be set to, measured in watts.</li> <li>maxPower (<code>int</code>): The maximum power output that the device can be set to, also in watts.</li> </ul> <p>Returns:</p> Type Description <code>ReturnDeviceInfo</code> <p>Different information about the inverter</p> Source code in <code>APsystemsEZ1/__init__.py</code> <pre><code>async def get_device_info(self) -&gt; ReturnDeviceInfo | None:\n    \"\"\"\n    Retrieves detailed information about the device. This method sends a request to the\n    \"getDeviceInfo\" endpoint and returns a dictionary containing various details about the device.\n\n    The returned data includes the device ID, device version, the SSID it is connected to, its IP\n    address, and its minimum and maximum power settings. This information can be used for monitoring\n    and configuring the device.\n\n    The response contains the following attributes:\n\n    - __deviceId__ (`str`): The unique identifier for the device.\n    - __devVer__ (`str`): The version of the device firmware or software.\n    - __ssid__ (`str`): The SSID of the network to which the device is currently connected.\n    - __ipAddr__ (`str`): The current IP address of the device.\n    - __minPower__ (`int`): The minimum power output that the device can be set to, measured in watts.\n    - __maxPower__ (`int`): The maximum power output that the device can be set to, also in watts.\n\n\n\n    :return: Different information about the inverter\n    :rtype: ReturnDeviceInfo\n\n    \"\"\"\n    response = await self._request(\"getDeviceInfo\")\n    return (\n        ReturnDeviceInfo(\n            deviceId=response[\"data\"][\"deviceId\"],\n            devVer=response[\"data\"][\"devVer\"],\n            ssid=response[\"data\"][\"ssid\"],\n            ipAddr=response[\"data\"][\"ipAddr\"],\n            minPower=int(response[\"data\"][\"minPower\"]),\n            maxPower=int(response[\"data\"][\"maxPower\"]),\n            isBatterySystem=bool(IS_BATTERY_REGEX.match(response[\"data\"][\"devVer\"]))\n        )\n        if response and response.get(\"data\")\n        else None\n    )\n</code></pre>"},{"location":"api/#APsystemsEZ1.APsystemsEZ1M.get_device_power_status","title":"<code>get_device_power_status()</code>  <code>async</code>","text":"<p>Retrieves the current power status of the device. This method sends a request to the \"getOnOff\" endpoint and returns a dictionary containing the power status of the device.</p> <p>The 'data' field in the returned dictionary includes the 'status' key, representing the current power status of the device, where '0' indicates that the device is on, and '1' indicates that it is off.</p> <p>Returns:</p> Type Description <code>bool</code> <p>0/normal when on, 1/alarm when off</p> Source code in <code>APsystemsEZ1/__init__.py</code> <pre><code>async def get_device_power_status(self) -&gt; bool:\n    \"\"\"\n    Retrieves the current power status of the device. This method sends a request to the\n    \"getOnOff\" endpoint and returns a dictionary containing the power status of the device.\n\n    The 'data' field in the returned dictionary includes the 'status' key, representing the\n    current power status of the device, where '0' indicates that the device is on, and '1'\n    indicates that it is off.\n\n    :return: 0/normal when on, 1/alarm when off\n    \"\"\"\n    response = await self._request(\"getOnOff\")\n\n    match (status := response[\"data\"][\"status\"]):\n        case int():\n            return not bool(status)\n        case str() if status.isdigit():\n            return not bool(int(status))\n        case _:\n            raise InverterReturnedError\n</code></pre>"},{"location":"api/#APsystemsEZ1.APsystemsEZ1M.get_max_power","title":"<code>get_max_power()</code>  <code>async</code>","text":"<p>Retrieves the set maximum power setting of the device. This method makes a request to the \"getMaxPower\" endpoint and returns a dictionary containing the maximum power limit of the device set by the user.</p> <p>Returns:</p> Type Description <code>int | None</code> <p>Max output power in watts</p> Source code in <code>APsystemsEZ1/__init__.py</code> <pre><code>async def get_max_power(self) -&gt; int | None:\n    \"\"\"Retrieves the set maximum power setting of the device. This method makes a request to the\n    \"getMaxPower\" endpoint and returns a dictionary containing the maximum power limit of the device set by the user.\n\n    :return: Max output power in watts\n    \"\"\"\n    response = await self._request(\"getMaxPower\")\n    if response is None or response[\"data\"][\"maxPower\"] == \"\":\n        return None\n    return int(response[\"data\"][\"maxPower\"])\n</code></pre>"},{"location":"api/#APsystemsEZ1.APsystemsEZ1M.get_output_data","title":"<code>get_output_data()</code>  <code>async</code>","text":"<p>Retrieves the output data from the device. This method calls a private method <code>_request</code> with the endpoint \"getOutputData\" to fetch the device's output data.</p> <p>The returned data includes various parameters such as power output status ('p1', 'p2'), energy readings ('e1', 'e2'), and total energy ('te1', 'te2') for two different inputs of the inverter. Additionally, it provides a status message and the device ID.</p> <p>The response contains the following attributes: - p1 (<code>float</code>): Power output status of inverter input 1 - e1 (<code>float</code>): Energy reading for inverter input 1 - te1 (<code>float</code>): Total energy for inverter input 1 - p2 (<code>float</code>): Power output status of inverter input 2 - e2 (<code>float</code>): Energy reading for inverter input 2 - te2 (<code>float</code>): Total energy for inverter input 2</p> <p>Returns:</p> Type Description <code>ReturnOutputData | None</code> <p>Information about energy/power-related information</p> Source code in <code>APsystemsEZ1/__init__.py</code> <pre><code>async def get_output_data(self) -&gt; ReturnOutputData | None:\n    \"\"\"\n    Retrieves the output data from the device. This method calls a private method `_request`\n    with the endpoint \"getOutputData\" to fetch the device's output data.\n\n    The returned data includes various parameters such as power output status ('p1', 'p2'),\n    energy readings ('e1', 'e2'), and total energy ('te1', 'te2') for two different inputs\n    of the inverter. Additionally, it provides a status message and the device ID.\n\n    The response contains the following attributes:\n    - __p1__ (`float`): Power output status of inverter input 1\n    - __e1__ (`float`): Energy reading for inverter input 1\n    - __te1__ (`float`): Total energy for inverter input 1\n    - __p2__ (`float`): Power output status of inverter input 2\n    - __e2__ (`float`): Energy reading for inverter input 2\n    - __te2__ (`float`): Total energy for inverter input 2\n\n    :return: Information about energy/power-related information\n    \"\"\"\n    response = await self._request(\"getOutputData\")\n    if response:\n        response[\"data\"] = {\n            key: float(value)\n            if isinstance(value, int)\n            else value\n            for key, value\n            in response[\"data\"].items()\n        }\n\n    if self.enable_debounce and response:\n        response[\"data\"].update(\n            {\n                \"e1\": self._debounce(self._e1, response[\"data\"][\"e1\"]),\n                \"e2\": self._debounce(self._e2, response[\"data\"][\"e2\"]),\n            }\n        )\n\n    return ReturnOutputData(**response[\"data\"]) if response else None\n</code></pre>"},{"location":"api/#APsystemsEZ1.APsystemsEZ1M.get_total_energy_lifetime","title":"<code>get_total_energy_lifetime()</code>  <code>async</code>","text":"<p>Retrieves and calculates the total lifetime energy generated by both inverter inputs 1 and 2. This method first calls get_output_data() to fetch the output data from the device, which includes individual lifetime energy readings for 'te1' and 'te2'. Each of these values represents the total lifetime energy generated by the respective inverter inputs, reported in kilowatt-hours (kWh).</p> <p>Returns:</p> Type Description <code>float | None</code> <p>The sum of the lifetime energy readings 'te1' and 'te2' as a float, representing the total lifetime energy in kWh generated by both inverter inputs.</p> Source code in <code>APsystemsEZ1/__init__.py</code> <pre><code>async def get_total_energy_lifetime(self) -&gt; float | None:\n    \"\"\"\n    Retrieves and calculates the total lifetime energy generated by both inverter inputs 1 and 2.\n    This method first calls get_output_data() to fetch the output data from the device, which\n    includes individual lifetime energy readings for 'te1' and 'te2'. Each of these values\n    represents the total lifetime energy generated by the respective inverter inputs, reported\n    in kilowatt-hours (kWh).\n\n    :return: The sum of the lifetime energy readings 'te1' and 'te2' as a float, representing the\n             total lifetime energy in kWh generated by both inverter inputs.\n    \"\"\"\n    data = await self.get_output_data()\n    return float(data.te1 + data.te2) if data else None\n</code></pre>"},{"location":"api/#APsystemsEZ1.APsystemsEZ1M.get_total_energy_today","title":"<code>get_total_energy_today()</code>  <code>async</code>","text":"<p>Retrieves and calculates the total energy generated today by both inverter inputs, 1 and 2. This method first calls get_output_data() to fetch the output data from the device, which includes individual energy readings for 'e1' and 'e2', each representing the energy in kilowatt-hours (kWh) generated by the respective inverter inputs.</p> <p>Returns:</p> Type Description <code>float | None</code> <p>The sum of the energy readings 'e1' and 'e2' as a float, representing the total energy generated today in kWh by both inverter inputs.</p> Source code in <code>APsystemsEZ1/__init__.py</code> <pre><code>async def get_total_energy_today(self) -&gt; float | None:\n    \"\"\"\n    Retrieves and calculates the total energy generated today by both inverter inputs, 1 and 2.\n    This method first calls get_output_data() to fetch the output data from the device, which\n    includes individual energy readings for 'e1' and 'e2', each representing the energy in\n    kilowatt-hours (kWh) generated by the respective inverter inputs.\n\n    :return: The sum of the energy readings 'e1' and 'e2' as a float, representing the total energy\n             generated today in kWh by both inverter inputs.\n    \"\"\"\n    data = await self.get_output_data()\n    return float(data.e1 + data.e2) if data else None\n</code></pre>"},{"location":"api/#APsystemsEZ1.APsystemsEZ1M.get_total_output","title":"<code>get_total_output()</code>  <code>async</code>","text":"<p>Retrieves and calculates the combined power output status of inverter inputs 1 and 2. This method first calls get_output_data() to fetch the output data from the device, which includes individual power output values for 'p1' and 'p2'. It then sums these values to provide the total combined power output.</p> <p>Returns:</p> Type Description <code>float | None</code> <p>The sum of power output values 'p1' and 'p2' as a float.</p> Source code in <code>APsystemsEZ1/__init__.py</code> <pre><code>async def get_total_output(self) -&gt; float | None:\n    \"\"\"\n    Retrieves and calculates the combined power output status of inverter inputs 1 and 2.\n    This method first calls get_output_data() to fetch the output data from the device, which\n    includes individual power output values for 'p1' and 'p2'. It then sums these values to\n    provide the total combined power output.\n\n    :return: The sum of power output values 'p1' and 'p2' as a float.\n    \"\"\"\n    data = await self.get_output_data()\n    return float(data.p1 + data.p2) if data else None\n</code></pre>"},{"location":"api/#APsystemsEZ1.APsystemsEZ1M.set_device_power_status","title":"<code>set_device_power_status(power_status)</code>  <code>async</code>","text":"<p>Sets the power status of the device to either on or off. This method sends a request to the \"setOnOff\" endpoint with a specified power status parameter. The power status accepts multiple string representations: '0' or 'ON' to start the inverter, and '1', 'SLEEP', or 'OFF' to stop the inverter.</p> <p>If the provided power status does not match any of the accepted representations, the method raises a ValueError with a descriptive message.</p> <p>Parameters:</p> Name Type Description Default <code>power_status</code> <code>bool</code> <p>The desired power status for the device, specified as '0', 'ON' for starting the inverter, or '1', 'SLEEP', 'OFF' for stopping it.</p> required <p>Returns:</p> Type Description <code>bool | None</code> <p>0/normal when on, 1/alarm when off</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If 'power_status' does not match the accepted values. The error message explains the valid values and their meanings.  Note: Internally, the method treats '0' and 'ON' as equivalent, both setting the power status to '0'. Similarly, '1', 'SLEEP', and 'OFF' are treated as equivalent, setting the power status to '1'.</p> Source code in <code>APsystemsEZ1/__init__.py</code> <pre><code>async def set_device_power_status(self, power_status: bool) -&gt; bool | None:\n    \"\"\"\n    Sets the power status of the device to either on or off. This method sends a request to the\n    \"setOnOff\" endpoint with a specified power status parameter. The power status accepts multiple\n    string representations: '0' or 'ON' to start the inverter, and '1', 'SLEEP', or 'OFF' to stop\n    the inverter.\n\n    If the provided power status does not match any of the accepted representations, the method\n    raises a ValueError with a descriptive message.\n\n    :param power_status: The desired power status for the device, specified as '0', 'ON' for\n                         starting the inverter, or '1', 'SLEEP', 'OFF' for stopping it.\n    :return: 0/normal when on, 1/alarm when off\n    :raises ValueError: If 'power_status' does not match the accepted values. The error message\n                        explains the valid values and their meanings.\n\n    Note: Internally, the method treats '0' and 'ON' as equivalent, both setting the power status\n    to '0'. Similarly, '1', 'SLEEP', and 'OFF' are treated as equivalent, setting the power status\n    to '1'.\n    \"\"\"\n    if power_status:\n        status_value = \"0\"\n    else:\n        status_value = \"1\"\n    request = await self._request(f\"setOnOff?status={status_value}\")\n    return not bool(int(request[\"data\"][\"status\"])) if request else None\n</code></pre>"},{"location":"api/#APsystemsEZ1.APsystemsEZ1M.set_max_power","title":"<code>set_max_power(power_limit)</code>  <code>async</code>","text":"<p>Sets the maximum power limit of the device. This method sends a request to the \"setMaxPower\" endpoint with the specified power limit as a parameter. The power limit must be an integer within the range of 30 to 800 watts.</p> <p>If the provided power limit is outside this range, the method raises a ValueError.</p> <p>Parameters:</p> Name Type Description Default <code>power_limit</code> <code>int</code> <p>The desired maximum power setting for the device, in watts. Must be an integer between 30 and 800.</p> required <p>Returns:</p> Type Description <code>int | None</code> <p>(Newly) set max output power in watts</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If 'power_limit' is not within the range of 30 to 800.  The key in the 'data' object is: - 'maxPower': Indicates the newly set maximum power output of the device in watts.</p> Source code in <code>APsystemsEZ1/__init__.py</code> <pre><code>async def set_max_power(self, power_limit: int) -&gt; int | None:\n    \"\"\"\n    Sets the maximum power limit of the device. This method sends a request to the \"setMaxPower\"\n    endpoint with the specified power limit as a parameter. The power limit must be an integer\n    within the range of 30 to 800 watts.\n\n    If the provided power limit is outside this range, the method raises a ValueError.\n\n    :param power_limit: The desired maximum power setting for the device, in watts.\n                        Must be an integer between 30 and 800.\n\n    :return: (Newly) set max output power in watts\n    :raises ValueError: If 'power_limit' is not within the range of 30 to 800.\n\n    The key in the 'data' object is:\n    - 'maxPower': Indicates the newly set maximum power output of the device in watts.\n    \"\"\"\n    if not self.min_power &lt;= power_limit &lt;= self.max_power:\n        raise ValueError(\n            f\"Invalid setMaxPower value: expected int between '30' and '800', got '{power_limit}'\"\n        )\n    request = await self._request(f\"setMaxPower?p={power_limit}\")\n    return int(request[\"data\"][\"maxPower\"]) if request else None\n</code></pre>"},{"location":"api/#APsystemsEZ1.ReturnOutputData","title":"<code>ReturnOutputData</code>  <code>dataclass</code>","text":"Source code in <code>APsystemsEZ1/__init__.py</code> <pre><code>@dataclass\nclass ReturnOutputData:\n    p1: float\n    e1: float\n    te1: float\n    p2: float\n    e2: float\n    te2: float\n\n    def __init__(self, **data):\n        '''The data attribute needs to be set manually because the inverter local interface \n        may return more results than the existing data attributes (such as originalData),\n          resulting in an error. '''\n        self.p1 = data.get(\"p1\", 0.0)\n        self.e1 = data.get(\"e1\", 0.0)\n        self.te1 = data.get(\"te1\", 0.0)\n        self.p2 = data.get(\"p2\", 0.0)\n        self.e2 = data.get(\"e2\", 0.0)\n        self.te2 = data.get(\"te2\", 0.0)\n</code></pre>"},{"location":"api/#APsystemsEZ1.ReturnOutputData.__init__","title":"<code>__init__(**data)</code>","text":"<p>The data attribute needs to be set manually because the inverter local interface  may return more results than the existing data attributes (such as originalData),   resulting in an error.</p> Source code in <code>APsystemsEZ1/__init__.py</code> <pre><code>def __init__(self, **data):\n    '''The data attribute needs to be set manually because the inverter local interface \n    may return more results than the existing data attributes (such as originalData),\n      resulting in an error. '''\n    self.p1 = data.get(\"p1\", 0.0)\n    self.e1 = data.get(\"e1\", 0.0)\n    self.te1 = data.get(\"te1\", 0.0)\n    self.p2 = data.get(\"p2\", 0.0)\n    self.e2 = data.get(\"e2\", 0.0)\n    self.te2 = data.get(\"te2\", 0.0)\n</code></pre>"}]}